{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","constants.js","Containers/App.js","action.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundry","state","haserror","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialStateSearch","intialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a9ce4bce.chunk.js","sourcesContent":["import React from 'react';\nimport 'tachyons';\n\nconst Card = (props) => {\n     return(\n             <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t             <img alt ='robots'src={`https://robohash.org/${props.id}?size=200x200`} />\n\t             <div>\n\t\t              <h2> {props.name} </h2>\n\t\t              <p> {props.email} </p>\n\t             </div>\n             </div>\n\n\n     \t);\n\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({robots}) => {\n\t\n\treturn(\n            <div>\n\t\t\t     {robots.map((user,i) =>{\n\t\treturn( <Card \n\t\tkey={i}\n\t\tid={robots[i].id}\n\t\t name={robots[i].name} \n\t\t email={robots[i].email} />\n\t\t );\n\t})}\n      \n   \t\t\t </div>\n\t\t);\n}\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) => {\n\treturn (\n\t\t   <div className='pa2' >\n\t\t\t    <input \n\t\t\t\taria-label='Search Robots'\n\t\t\t    className='pa3 ba b--green bg-lightest-blue'\n\t\t\t    type='search' \n\t\t\t    placeholder='search robots'\n\t\t\t    onChange = {searchChange}\n\t\t\t     />\n\t\t\t    \n\t\t   </div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n\treturn(\n         <div style= {{ overflow:'Scroll', border:'5px solid black' ,height:'800px'  }} >\n         {props.children}\n         </div>\n\t\t);\n} ;\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thaserror: false\n\t\t}\n\t}\n\tcomponentDidCatch(error,info){\n\t\tthis.setState({haserror:true})\n\n\t}\n\trender(){\n\t\tif (this.state.haserror){\n\t\t\treturn <h1> Ooops.... That is not good</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;\n","    export  const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n    export const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\n    export const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\n    export const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from '../Components/Cardlist';\nimport SearchBox from '../Components/SearchBox';\nimport 'tachyons';\nimport './App.css';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundry from '../Components/ErrorBoundry';\n\nimport {setSearchField, requestRobots} from '../action';\n// import { requestRobots } from '../reducers';\n\n\nconst mapStateToProps = state => {\n\treturn{\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending:state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n\treturn{\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t} \n}\n\nclass App extends Component {\n\t\n\t\tcomponentDidMount(){\n\t\t\tthis.props.onRequestRobots();\n    \t}\n\t\n\n\trender(){\n\t\tconst {searchField, onSearchChange, robots,isPending} = this.props\n\n\t\tconst filteredRobots = robots.filter(robot =>{\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\t\n\t\t\treturn isPending ?\n\t\t\t <h1 className='tc'  >Loading</h1> :\n\n\t\t(\n\t\t\t<div className='tc'>\n\t\t\t  <h1 className='f1' >RoboFriends</h1>\n\t\t\t  < SearchBox searchChange={onSearchChange}/>\n\t\t\t  <Scroll>\n               <ErrorBoundry>\n\t\t\t  \t <Cardlist robots={filteredRobots} />\n\t\t\t  \t</ErrorBoundry>\n\t\t\t  </Scroll>\n\t         </div>\n\t\t);\n\t\t}\n\t\t\n\t}\t\n\n\t\n\t\t\n\t\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FAILED\n\n    } from './constants'; \n\nexport const setSearchField = (text) =>({\n    type: CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots = () => (dispatch) =>{\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    \t.then(response=> response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n\n} from './constants'; \n\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch,action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n        return Object.assign({},state,{searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error:''\n}\n\nexport const requestRobots = (state=intialStateRobots, action={})=>{\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING :\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS :\n            return Object.assign({}, state,{robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED :\n            return Object.assign({},state,{error:action.payload, isPending:false})\n        default:\n            return state;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider } from 'react-redux'\nimport {applyMiddleware, createStore, combineReducers} from 'redux'\nimport { createLogger } from 'redux-logger';\nimport  thunkMiddleware  from 'redux-thunk';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}